name: Update XKCD Comic in README

on:
  schedule:
    - cron: '0 0 * * *' # Runs every 24 hours at midnight UTC
  workflow_dispatch: # Allows manual triggering

jobs:
  update-xkcd-comic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Fetch latest XKCD comic
        run: |
          python -c "
          import requests
          from bs4 import BeautifulSoup
          import re

          response = requests.get('https://xkcd.com')
          soup = BeautifulSoup(response.text, 'html.parser')
          comic_div = soup.find('div', id='comic')
          img_tag = comic_div.find('img')
          img_src = img_tag['src'] if img_tag else ''
          img_title = img_tag['title'] if img_tag else ''
          img_alt = img_tag['alt'] if img_tag else ''

          if img_src.startswith('//'):
            img_src = 'https:' + img_src

          with open('xkcd_info.txt', 'w') as f:
            f.write(f'{img_src}\n{img_title}\n{img_alt}')
          "

      - name: Update README.md with latest XKCD comic
        run: |
          # Debug: Log the content of xkcd_info.txt
          echo "Contents of xkcd_info.txt:"
          cat xkcd_info.txt

          # Check if xkcd_info.txt exists and has content
          if [ ! -f xkcd_info.txt ] || [ ! -s xkcd_info.txt ]; then
            echo "Error: xkcd_info.txt does not exist or is empty. Skipping README update."
            exit 0
          fi

          # Read the fetched comic info with fallback values
          IFS=$'\n' read -d '' -r img_src img_title img_alt < xkcd_info.txt || {
            img_src="https://xkcd.com"
            img_title="Unable to fetch description"
            img_alt="XKCD Comic Placeholder"
            echo "Warning: Failed to read comic info, using fallback values."
          }

          # Debug: Log the values read
          echo "Image Source: $img_src"
          echo "Image Title: $img_title"
          echo "Image Alt: $img_alt"

          # Read the current README.md content
          if [ -f README.md ]; then
            readme_content=$(cat README.md)
          else
            readme_content=''
          fi

          # Check if 'Latest XKCD Comic' section exists using a more robust approach
          if grep -q "^## Latest XKCD Comic" README.md; then
            echo "Existing XKCD section found, replacing it."
            # Use a temporary file to build the updated content
            awk 'BEGIN {p=1} /^## Latest XKCD Comic/ {p=0; print "## Latest XKCD Comic\n\n![XKCD Comic]('"'"'$img_src'"'"')  \n**Title:** '"'"'$img_alt'"'"'  \n**Description:** '"'"'$img_title'"'"'  \n\n_Updated daily via GitHub Actions._"; next} p {print}' README.md > temp_readme.md
          else
            echo "No XKCD section found, appending it."
            # Append the new section
            echo -e "$readme_content\n\n## Latest XKCD Comic\n\n![XKCD Comic]('$img_src')  \n**Title:** '$img_alt'  \n**Description:** '$img_title'  \n\n_Updated daily via GitHub Actions._" > temp_readme.md
          fi

          # Write the updated content back to README.md
          mv temp_readme.md README.md
          echo "README.md updated successfully."

      - name: Commit and push changes to a new branch
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'
          git add README.md
          git commit -m 'chore(xkcd): update latest XKCD comic in README' || echo 'No changes to commit'
          if [ -n "$PAT_TOKEN" ]; then
            # Create a unique branch name using timestamp
            BRANCH_NAME="xkcd-updates-$(date +%Y%m%d-%H%M%S)"
            git checkout -b $BRANCH_NAME
            git push https://$PAT_TOKEN@github.com/francojeferson/francojeferson.git $BRANCH_NAME || echo 'Push failed, check token permissions'
          else
            echo 'PAT_TOKEN not set, skipping push. Please set up a personal access token as a secret.'
            exit 0
          fi

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          if [ -n "$GITHUB_TOKEN" ]; then
            # Install GitHub CLI using the official method for Ubuntu
            type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://packages.github.com/cli/apt stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y

            # Create PR with the unique branch name
            BRANCH_NAME="xkcd-updates-$(date +%Y%m%d-%H%M%S)"
            gh pr create --base main --head $BRANCH_NAME --title "Update XKCD Comic in README" --body "Automated update of the latest XKCD comic in README.md" || echo 'Failed to create PR, please check manually.'
          else
            echo 'GITHUB_TOKEN not set, skipping PR creation. Please create a PR manually.'
          fi
